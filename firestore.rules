rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== FUNÇÕES AUXILIARES ==========
    
    // Verifica se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verifica se o usuário pertence à organização
    function belongsToOrg(orgId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }
    
    // Verifica se o usuário tem uma das roles especificadas
    function hasRole(roles) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    // Verifica se é superadmin (acesso total)
    function isSuperAdmin() {
      return hasRole(['superadmin']);
    }
    
    // Verifica se é admin da organização
    function isOrgAdmin(orgId) {
      return belongsToOrg(orgId) && hasRole(['admin', 'superadmin']);
    }
    
    // Verifica se é manager ou superior
    function isManagerOrAbove(orgId) {
      return belongsToOrg(orgId) && hasRole(['admin', 'manager', 'superadmin']);
    }
    
    // Verifica se pode editar leads (admin, manager ou agente responsável)
    function canEditLead(orgId, leadData) {
      return belongsToOrg(orgId) && (
        hasRole(['admin', 'manager']) || 
        (hasRole(['agent']) && leadData.assignedTo == request.auth.uid)
      );
    }
    
    // ========== COLEÇÕES GLOBAIS ==========
    
    // Usuários globais (apenas para autenticação)
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if false; // Apenas via Admin SDK
    }
    
    // Configurações globais do sistema
    match /system/{document} {
      allow read: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }
    
    // ========== ORGANIZAÇÕES E MULTI-TENANCY ==========
    
    // Organizações principais
    match /organizations/{orgId} {
      allow read: if belongsToOrg(orgId) || isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isOrgAdmin(orgId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
      
      // ========== USUÁRIOS DA ORGANIZAÇÃO ==========
      match /users/{userId} {
        allow read: if belongsToOrg(orgId) || isSuperAdmin();
        allow create: if isOrgAdmin(orgId) || isSuperAdmin();
        allow update: if (belongsToOrg(orgId) && hasRole(['admin'])) || 
                        (request.auth.uid == userId && !request.resource.data.diff(resource.data).hasAny(['role', 'permissions', 'organizationId'])) ||
                        isSuperAdmin();
        allow delete: if isOrgAdmin(orgId) || isSuperAdmin();
      }
      
      // ========== LEADS E CRM ==========
      match /leads/{leadId} {
        allow read: if belongsToOrg(orgId);
        allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow update: if canEditLead(orgId, resource.data);
        allow delete: if isManagerOrAbove(orgId);
        
        // Interações do lead
        match /interactions/{interactionId} {
          allow read: if belongsToOrg(orgId);
          allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
          allow update: if false; // Interações são imutáveis
          allow delete: if isOrgAdmin(orgId);
        }
        
        // Anexos do lead
        match /attachments/{attachmentId} {
          allow read: if belongsToOrg(orgId);
          allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
          allow delete: if isManagerOrAbove(orgId);
        }
      }
      
      // ========== EMPRESAS ==========
      match /companies/{companyId} {
        allow read: if belongsToOrg(orgId);
        allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow update: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow delete: if isManagerOrAbove(orgId);
      }
      
      // ========== CAMPANHAS E MARKETING ==========
      match /campaigns/{campaignId} {
        allow read: if belongsToOrg(orgId);
        allow create: if isManagerOrAbove(orgId);
        allow update: if isManagerOrAbove(orgId);
        allow delete: if isOrgAdmin(orgId);
        
        // Métricas da campanha
        match /metrics/{metricId} {
          allow read: if belongsToOrg(orgId);
          allow write: if false; // Apenas via Cloud Functions
        }
      }
      
      // ========== AUTOMAÇÕES ==========
      match /automations/{automationId} {
        allow read: if belongsToOrg(orgId);
        allow create: if isManagerOrAbove(orgId);
        allow update: if isManagerOrAbove(orgId);
        allow delete: if isOrgAdmin(orgId);
        
        // Execuções da automação
        match /executions/{executionId} {
          allow read: if belongsToOrg(orgId);
          allow write: if false; // Apenas via Cloud Functions
        }
      }
      
      // ========== INTEGRAÇÕES ==========
      match /integrations/{integrationId} {
        allow read: if belongsToOrg(orgId);
        allow create: if isOrgAdmin(orgId);
        allow update: if isOrgAdmin(orgId);
        allow delete: if isOrgAdmin(orgId);
        
        // Logs das integrações
        match /logs/{logId} {
          allow read: if isOrgAdmin(orgId);
          allow write: if false; // Apenas via Cloud Functions
        }
      }
      
      // ========== WHATSAPP E CONVERSAS ==========
      match /whatsapp/{conversationId} {
        allow read: if belongsToOrg(orgId);
        allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow update: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow delete: if isManagerOrAbove(orgId);
        
        // Mensagens da conversa
        match /messages/{messageId} {
          allow read: if belongsToOrg(orgId);
          allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
          allow update: if false; // Mensagens são imutáveis
          allow delete: if isOrgAdmin(orgId);
        }
      }
      
      // ========== DIALOGFLOW E IA ==========
      match /dialogflow/{agentId} {
        allow read: if belongsToOrg(orgId);
        allow create: if isOrgAdmin(orgId);
        allow update: if isOrgAdmin(orgId);
        allow delete: if isOrgAdmin(orgId);
        
        // Sessões do Dialogflow
        match /sessions/{sessionId} {
          allow read: if belongsToOrg(orgId);
          allow write: if false; // Apenas via Cloud Functions
        }
      }
      
      // ========== ANALYTICS E RELATÓRIOS ==========
      match /analytics/{document=**} {
        allow read: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'viewer']);
        allow write: if false; // Apenas via Cloud Functions
      }
      
      // ========== CONFIGURAÇÕES DA ORGANIZAÇÃO ==========
      match /settings/{settingType} {
        allow read: if belongsToOrg(orgId);
        allow write: if isOrgAdmin(orgId);
      }
      
      // ========== WHITELABEL ==========
      match /whitelabel/{document} {
        allow read: if belongsToOrg(orgId);
        allow write: if isOrgAdmin(orgId);
      }
      
      // ========== NOTIFICAÇÕES ==========
      match /notifications/{notificationId} {
        allow read: if belongsToOrg(orgId) && 
                     (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
        allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow update: if belongsToOrg(orgId) && resource.data.userId == request.auth.uid;
        allow delete: if belongsToOrg(orgId) && 
                       (resource.data.userId == request.auth.uid || hasRole(['admin']));
      }
      
      // ========== TAREFAS ==========
      match /tasks/{taskId} {
        allow read: if belongsToOrg(orgId) && 
                     (resource.data.assignedTo == request.auth.uid || hasRole(['admin', 'manager']));
        allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow update: if belongsToOrg(orgId) && 
                       (resource.data.assignedTo == request.auth.uid || hasRole(['admin', 'manager']));
        allow delete: if belongsToOrg(orgId) && hasRole(['admin', 'manager']);
      }
      
      // ========== AUDITORIA ==========
      match /audit/{auditId} {
        allow read: if isOrgAdmin(orgId);
        allow write: if false; // Apenas via Cloud Functions
      }
      
      // ========== TEMPLATES ==========
      match /templates/{templateId} {
        allow read: if belongsToOrg(orgId);
        allow create: if isManagerOrAbove(orgId);
        allow update: if isManagerOrAbove(orgId);
        allow delete: if isOrgAdmin(orgId);
      }
      
      // ========== PRODUTOS E SERVIÇOS ==========
      match /products/{productId} {
        allow read: if belongsToOrg(orgId);
        allow create: if isManagerOrAbove(orgId);
        allow update: if isManagerOrAbove(orgId);
        allow delete: if isOrgAdmin(orgId);
      }
      
      // ========== PROPOSTAS ==========
      match /proposals/{proposalId} {
        allow read: if belongsToOrg(orgId);
        allow create: if belongsToOrg(orgId) && hasRole(['admin', 'manager', 'agent']);
        allow update: if belongsToOrg(orgId) && 
                       (resource.data.createdBy == request.auth.uid || hasRole(['admin', 'manager']));
        allow delete: if isManagerOrAbove(orgId);
      }
    }
    
    // ========== WEBHOOKS E INTEGRAÇÕES EXTERNAS ==========
    match /webhooks/{webhookId} {
      allow read: if false; // Apenas via Cloud Functions
      allow write: if false; // Apenas via Cloud Functions
    }
    
    // ========== LOGS GLOBAIS ==========
    match /logs/{logId} {
      allow read: if isSuperAdmin();
      allow write: if false; // Apenas via Cloud Functions
    }
  }
}

